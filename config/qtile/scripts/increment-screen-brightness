#!/usr/bin/env python3

import os
import re
import subprocess


brightness = float(subprocess.run(
    'echo $(xrandr --verbose | grep Brightness) | awk "{print \$ 2}"',
    shell=True,
    stdout=subprocess.PIPE
).stdout.decode().strip())

verbose = subprocess.run(
    "xrandr --verbose", 
    shell=True, 
    stdout=subprocess.PIPE
).stdout.decode()

monitors = {
    int(m.group(1)): m.group(2)
    for m in map(
        lambda x: re.match(r"^(\d+):.*\s(\S+)$", x),
        [
            x.strip() for x in subprocess.run(
            "xrandr --listmonitors",
            shell=True,
            stdout=subprocess.PIPE
            ).stdout.decode().split("\n")
        ]
    )
    if m
}

monitors

class ScreenBrightness:
    def __init__(self):
        self.brightness_files = {
            "thinkpad": {
                "current": "/sys/class/leds/tpacpi::kbd_backlight/brightness",
                "max": "/sys/class/leds/tpacpi::kbd_backlight/max_brightness"
            },
        }

        self._host = None
        self._max_brightness = None
        self._current_brightness = None

    @property
    def host(self):
        if self._host is not None:
            return self._host
        # TODO: fix this
        self._host = "thinkpad"
        return self._host

    @property
    def max_brightness(self):
        if self._max_brightness is not None:
            return self._max_brightness

        host = self.host
        file = self.brightness_files[host]["max"]

        if not os.path.isfile(file):
            raise FileNotFoundError(f"Cant find {file}")

        max_brightness = subprocess.run(
            f"cat {file}", 
            shell=True,
            stdout=subprocess.PIPE,
        ).stdout.decode().strip()

        try:
            max_brightness = int(max_brightness)
        except Exception as e:
            raise e

        self._max_brightness = max_brightness
        return self._max_brightness
    
    @property
    def current_brightness(self):
        if self._current_brightness is not None:
            return self._current_brightness

        host = self.host
        file = self.brightness_files[host]["current"]

        if not os.path.isfile(file):
            raise FileNotFoundError(f"Cant find {file}")

        current_brightness = subprocess.run(
            f"cat {file}", 
            shell=True,
            stdout=subprocess.PIPE,
        ).stdout.decode().strip()

        try:
            current_brightness = int(current_brightness)
        except Exception as e:
            raise e

        self._current_brightness = current_brightness 
        return self._current_brightness

    def set(self, value: int):
        if value > self.max_brightness:
            value = self.max_brightness

        if value < 0:
            value = 0
    
        host = self.host
        file = self.brightness_files[host]["current"]
        
        result = subprocess.run(
            f"echo {value} | sudo tee {file}", 
            shell=True,
            stdout=subprocess.PIPE
        )
        
        if result.returncode == 0:
            self._current_brightness = value
        else:
            raise Exception("could not write to the brightness file")

        return None

    def increment(self, value: int):
        self.set(self.current_brightness + value)


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Control ThinkPad keyboard backlight.")
    parser.add_argument("value", type=int, help="Brightness increment or value to set")
    args = parser.parse_args()
    keylight = KeyLight().increment(args.value)
