#!/usr/bin/env python3

import re
import subprocess


def get_active_monitors():
    verbose = [
        x for x in subprocess.run(
            "xrandr --listmonitors",
            shell=True,
            stdout=subprocess.PIPE
        ).stdout.decode().split("\n")
        if len(x) > 1
    ]
    active_dual_monitors = {}
    for l in verbose:
        m = re.match(r'^\s*([0-9]*):\s*\+(\S*)\s*.*', l)
        if m:
            if m.group(1) is not None and m.group(2) is not None:
                active_dual_monitors[m.group(2)] = {"primary": int(m.group(1)) == 0}
    return active_dual_monitors


def get_brightness_for_active_monitors():
    active_monitors = get_active_monitors()
    verbose = [
        x for x in subprocess.run(
            "xrandr --verbose",
            shell=True,
            stdout=subprocess.PIPE
        ).stdout.decode().split("\n")
        if len(x) > 1
    ]
    current_monitor = None
    for line in verbose:
        monitor = re.match(r'^([a-zA-Z][a-zA-Z0-9-]*)\s+(connected|disconnected).*' , line)
        if monitor is not None:
            current_monitor = monitor.group(1)
        elif current_monitor is not None:
            brightness = re.match(r'^\s*(Brightness:)\s*([0-9]*\.[0-9]*).*' , line)
            if brightness is not None:
                if current_monitor in active_monitors:
                    active_monitors[current_monitor]["brightness"] = float(brightness.group(2))
    return active_monitors


def dual(val: float):
    dual_monitors = {
        k: v for k, v in get_brightness_for_active_monitors().items()
        if not v["primary"]
    }
    for monitor, vals in dual_monitors.items():
        current = vals["brightness"]
        new = current + val
        result = subprocess.run(
            f"xrandr --output {monitor} --brightness {new}",
            shell=True,
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE
        )
        if len(result.stderr.decode()) > 0:
            raise Exception(result.stderr.decode())
    return None


def primary(val: float):
    _ = subprocess.run(
		f'sudo light -S $(echo "$(light)" + "{val}" | bc)',
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Control ThinkPad keyboard backlight.")
    parser.add_argument(
        "--which",
        type=str,
        default="primary",
        help="dual or primary"
    )
    parser.add_argument(
        "--value",
        type=float,
        default=0.0,
        help="Brightness increment value"
    )
    args = parser.parse_args()
    try:
        if args.which == "dual":
            dual(args.value)
        elif args.which == "primary":
            primary(args.value)
    except Exception as e:
        raise Exception(e)
