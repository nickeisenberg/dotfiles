#!/usr/bin/env python3
import argparse
import os
from pathlib import Path

def count_lines_in_file(file_path: Path) -> int:
    """Count non-empty lines in a given file."""
    try:
        with file_path.open("r", encoding="utf-8", errors="ignore") as f:
            return sum(1 for line in f if line.strip())
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
        return 0


def count_lines_in_directory(root: Path, extensions: list[str]) -> dict[str, int]:
    """Recursively count lines by extension in a directory."""
    totals = {}
    for path in root.rglob("*"):
        if path.is_file() and (not extensions or path.suffix in extensions):
            ext = path.suffix or "NO_EXT"
            totals[ext] = totals.get(ext, 0) + count_lines_in_file(path)
    return totals


def main():
    parser = argparse.ArgumentParser(
        description="Count lines of code in a directory."
    )
    parser.add_argument(
        "directory",
        type=str,
        nargs="?",
        default=".",
        help="Path to the root directory (default: current directory).",
    )
    parser.add_argument(
        "-t", "--types",
        nargs="+",
        default=[],
        help="File types to include (e.g. .py .js .cpp). Leave empty for all.",
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Print per-file line counts.",
    )

    args = parser.parse_args()
    root = Path(args.directory).resolve()

    if not root.exists():
        print(f"Error: {root} does not exist.")
        return

    print(f"Counting lines in: {root}")
    if args.types:
        print(f"File types: {', '.join(args.types)}")

    totals = {}
    grand_total = 0

    for path in root.rglob("*"):
        if path.is_file() and (not args.types or path.suffix in args.types):
            count = count_lines_in_file(path)
            if args.verbose:
                print(f"{path.relative_to(root)}: {count}")
            totals[path.suffix or "NO_EXT"] = totals.get(path.suffix or "NO_EXT", 0) + count
            grand_total += count

    print("\nSummary:")
    for ext, total in sorted(totals.items(), key=lambda x: -x[1]):
        print(f"{ext or '(no ext)'}: {total} lines")
    print(f"\nTotal: {grand_total} lines")


if __name__ == "__main__":
    main()
